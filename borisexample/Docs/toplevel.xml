<asdoc>

<method name='createParticles2DFromBodies' fullname='com.boristhebrave.Box2DWith.Flint:createParticles2DFromBodies' isStatic='false' isFinal='false' isOverride='false'  param_names='bodies;ownsBody;factory' param_types='Array;Boolean;org.flintparticles.common.particles:ParticleFactory' param_defaults='undefined;false;null' result_type='Array'>
<description><![CDATA[
  Wraps each body in a Particle2D.
  ]]></description>
<param><![CDATA[  bodies An array of b2Body.
  ]]></param>
<param><![CDATA[  ownsBody If true, the body is destroyed when the particle dies.
  ]]></param>
<param><![CDATA[  factory An optional particle factory to use to generate the particles.
  ]]></param>
<return><![CDATA[An array of Particle2D.
  ]]></return>
</method>
<classRec name='BodyZone' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\Flint\BodyZone.as' namespace='com.boristhebrave.Box2DWith.Flint' access='public' baseclass='Object' interfaces='org.flintparticles.twoD.zones:Zone2D' isFinal='false' isDynamic='false' >
<description><![CDATA[
  A BodyZone allows 2D particles to be picked randomly from inside a body.
  ]]></description>
</classRec>
<method name='BodyZone' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/BodyZone' isStatic='false' isFinal='false' isOverride='false'  param_names='body;byMass;local;scale' param_types='Box2D.Dynamics:b2Body;Boolean;Boolean;Number' param_defaults='undefined;true;true;unknown' result_type='*'>
<description><![CDATA[
   Basic constructor
   ]]></description>
<param><![CDATA[body The body get shapes from.
   ]]></param>
<param><![CDATA[scale Scaling factor between Flint pixels and Box2D units in pixels/unit.
   ]]></param>
<param><![CDATA[byMass Should random locations be weighted by mass or by area.
   ]]></param>
<param><![CDATA[local If true, points are considered in the bodies local co-ordinates, not world co-ordinates.
   ]]></param>
</method>
<method name='contains' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/contains' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y' param_types='Number;Number' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
   The contains method determines whether a point is inside the zone.
   
   ]]></description>
<param><![CDATA[x The x coordinate of the location to test for.
   ]]></param>
<param><![CDATA[y The y coordinate of the location to test for.
   ]]></param>
<return><![CDATA[true if point is inside the zone, false if it is outside.
   ]]></return>
</method>
<method name='getArea' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/getArea' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
   The getArea method returns the size of the zone.
   It's used by the MultiZone class to manage the balancing between the
   different zones.
   
   ]]></description>
<return><![CDATA[the size of the zone.
   ]]></return>
</method>
<method name='getLocation' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/getLocation' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Point'>
<description><![CDATA[
   The getLocation method returns a random point inside the zone.
   
   ]]></description>
<return><![CDATA[a random point inside the zone.
   ]]></return>
</method>
<method name='getShapeWeights' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/getShapeWeights' isStatic='false' isFinal='false' isOverride='false'  result_type='org.flintparticles.common.utils:FastWeightedArray'>
<description><![CDATA[
   Returns a FastWeightedArray with an entry for each shape in the body,
   and weightings according to mass or volume.
   ]]></description>
<return><![CDATA[   ]]></return>
</method>
<field name='body' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/body' type='Box2D.Dynamics:b2Body' isStatic='false' isConst='false' >
<description><![CDATA[ The body to pick points from. ]]></description>
</field>
<field name='byMass' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/byMass' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Are points randomly weighted by mass, or by volume. ]]></description>
</field>
<field name='local' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/local' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Is the returned point in local or world co-ordinates. ]]></description>
</field>
<field name='scale' fullname='com.boristhebrave.Box2DWith.Flint:BodyZone/scale' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The scale factor between Flint pixels and Box2D units, in pixels/unit. ]]></description>
</field>
<classRec name='BodyInit' fullname='com.boristhebrave.Box2DWith.Flint:BodyInit' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\Flint\BodyInit.as' namespace='com.boristhebrave.Box2DWith.Flint' access='public' baseclass='org.flintparticles.common.initializers:InitializerBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
  This initializer creates bodies with the given body and shape def,
  and then attaches them to particles for later use with BodyRenderer.
  The particles velocity and position are copied over, allowing you to use
  Flint's usual suite of initializers as well as rigid bodies.
  
  <p>If you wish to do further initialization, create a new initializer,
  and ensure it has lower default priority than BodyInitializer.</p>
  ]]></description>
</classRec>
<method name='BodyInit' fullname='com.boristhebrave.Box2DWith.Flint:BodyInit/BodyInit' isStatic='false' isFinal='false' isOverride='false'  param_names='world;bodyDef;shapeDefs;scale' param_types='Box2D.Dynamics:b2World;Box2D.Dynamics:b2BodyDef;Array;Number' param_defaults='undefined;undefined;undefined;unknown' result_type='*'>
<description><![CDATA[
   Creates a new initializer, attached to the given world.
   ]]></description>
<param><![CDATA[world The world attached to.
   ]]></param>
<param><![CDATA[bodyDef The definition used to create bodies for each particle
   ]]></param>
<param><![CDATA[shapes An array of b2ShapeDef to create inside the body.
   ]]></param>
<param><![CDATA[scale The scaling factor to use in pixels/unit for initializing the position and velocity of the body given the particle properties.
   ]]></param>
</method>
<method name='getDefaultPriority' fullname='com.boristhebrave.Box2DWith.Flint:BodyInit/getDefaultPriority' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initialize' fullname='com.boristhebrave.Box2DWith.Flint:BodyInit/initialize' isStatic='false' isFinal='false' isOverride='true'  param_names='emitter;particle' param_types='org.flintparticles.common.emitters:Emitter;org.flintparticles.common.particles:Particle' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='bodyDef' fullname='com.boristhebrave.Box2DWith.Flint:BodyInit/bodyDef' type='Box2D.Dynamics:b2BodyDef' isStatic='false' isConst='false' >
<description><![CDATA[ The body definition used to create bodies. SetMassFromShapes is always used to define the body mass. ]]></description>
</field>
<field name='scale' fullname='com.boristhebrave.Box2DWith.Flint:BodyInit/scale' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The scaling factor to use when initialzing body properties from particle properties. ]]></description>
</field>
<field name='shapeDefs' fullname='com.boristhebrave.Box2DWith.Flint:BodyInit/shapeDefs' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ An array of b2ShapeDef used to fill the body with shapes. ]]></description>
</field>
<field name='world' fullname='com.boristhebrave.Box2DWith.Flint:BodyInit/world' type='Box2D.Dynamics:b2World' isStatic='false' isConst='false' >
<description><![CDATA[ The world which bodies will be created for. ]]></description>
</field>
<classRec name='CircleInit' fullname='com.boristhebrave.Box2DWith.Flint:CircleInit' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\Flint\CircleInit.as' namespace='com.boristhebrave.Box2DWith.Flint' access='public' baseclass='org.flintparticles.common.initializers:InitializerBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
  This initializer creates bodies with a single circle shape inside,
  and then attaches them to particles. You need to set the particles radius
  with CollisionRadiusInit.
  ]]></description>
</classRec>
<method name='CircleInit' fullname='com.boristhebrave.Box2DWith.Flint:CircleInit/CircleInit' isStatic='false' isFinal='false' isOverride='false'  param_names='world;scale' param_types='Box2D.Dynamics:b2World;Number' param_defaults='undefined;unknown' result_type='*'>
<description><![CDATA[
   Construct a new CircleInit
   ]]></description>
<param><![CDATA[world The world attached to. 
   ]]></param>
<param><![CDATA[scale The scaling factor to use in pixels/unit for initializing the position and velocity of the body given the particle properties. 
   ]]></param>
</method>
<method name='getDefaultPriority' fullname='com.boristhebrave.Box2DWith.Flint:CircleInit/getDefaultPriority' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initialize' fullname='com.boristhebrave.Box2DWith.Flint:CircleInit/initialize' isStatic='false' isFinal='false' isOverride='true'  param_names='emitter;particle' param_types='org.flintparticles.common.emitters:Emitter;org.flintparticles.common.particles:Particle' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='scale' fullname='com.boristhebrave.Box2DWith.Flint:CircleInit/private:scale' type='Number' isStatic='false' isConst='false' >
</field>
<field name='world' fullname='com.boristhebrave.Box2DWith.Flint:CircleInit/private:world' type='Box2D.Dynamics:b2World' isStatic='false' isConst='false' >
</field>
<classRec name='BodiesInit' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\Flint\BodiesInit.as' namespace='com.boristhebrave.Box2DWith.Flint' access='public' baseclass='org.flintparticles.common.initializers:InitializerBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
  This initializer creates bodies with a random choice of body and shape definition,
  and then attaches them to particles for later use with BodyRenderer.
  The particles velocity and position are copied over, allowing you to use
  Flint's usual suite of initializers as well as rigid bodies.
  
  <p>If you wish to do further initialization, create a new initializer,
  and ensure it has lower default priority than BodyInitializer.</p>
  ]]></description>
</classRec>
<method name='BodiesInit' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit/BodiesInit' isStatic='false' isFinal='false' isOverride='false'  param_names='world;bodyDefs;shapeDefs;scale' param_types='Box2D.Dynamics:b2World;Number' param_defaults='undefined;undefined;undefined;unknown' result_type='*'>
<description><![CDATA[
   Creates a new initializer, attached to the given world.
   ]]></description>
<param><![CDATA[world The world attached to. 
   ]]></param>
<param><![CDATA[bodyDef The array or FastWeightedArray to choose body defs from. 
   ]]></param>
<param><![CDATA[shapes An array or FastWeightedArray of arrays of b2ShapeDef to create inside the body.
   ]]></param>
<param><![CDATA[scale The scaling factor to use in pixels/unit for initializing the position and velocity of the body given the particle properties. 
   ]]></param>
<see><![CDATA[org.flintparticles.common.utils.FastWeightedArray
   ]]></see>
</method>
<method name='getDefaultPriority' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit/getDefaultPriority' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initialize' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit/initialize' isStatic='false' isFinal='false' isOverride='true'  param_names='emitter;particle' param_types='org.flintparticles.common.emitters:Emitter;org.flintparticles.common.particles:Particle' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='randomFrom' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit/private:randomFrom' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='' param_defaults='undefined' result_type='*'>
</method>
<field name='_world' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit/private:_world' type='Box2D.Dynamics:b2World' isStatic='false' isConst='false' >
<description><![CDATA[ The world which bodies will be created for. ]]></description>
</field>
<field name='bodyDefs' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit/bodyDefs' type='' isStatic='false' isConst='false' >
<description><![CDATA[ The array or FastWeightedArray to choose body defs from. SetMassFromShapes is always used to define the body mass. ]]></description>
</field>
<field name='scale' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit/scale' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The scaling factor to use when initialzing body properties from particle properties. ]]></description>
</field>
<field name='shapeDefs' fullname='com.boristhebrave.Box2DWith.Flint:BodiesInit/shapeDefs' type='' isStatic='false' isConst='false' >
<description><![CDATA[ An array or FastWeightedArray of arrays of b2ShapeDef to create inside the body. ]]></description>
</field>
<classRec name='Collide' fullname='com.boristhebrave.Box2DWith.Flint:Collide' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\Flint\Collide.as' namespace='com.boristhebrave.Box2DWith.Flint' access='public' baseclass='org.flintparticles.common.actions:ActionBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Collide method updates particles containing bodies with the position and
  velocities of the body. In other words, the inverse action to BodyRenderer.
  
  <p>By applying this action, particles will move according to the underlying bodies.
  If you have both the action and BodyRenderer, then particles will move according
  to both Box2D collision resolution and other particle actions.</p>
  ]]></description>
</classRec>
<method name='Collide' fullname='com.boristhebrave.Box2DWith.Flint:Collide/Collide' isStatic='false' isFinal='false' isOverride='false'  param_names='scale' param_types='Number' param_defaults='unknown' result_type='*'>
</method>
<method name='getDefaultPriority' fullname='com.boristhebrave.Box2DWith.Flint:Collide/getDefaultPriority' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='update' fullname='com.boristhebrave.Box2DWith.Flint:Collide/update' isStatic='false' isFinal='false' isOverride='true'  param_names='emitter;particle;time' param_types='org.flintparticles.common.emitters:Emitter;org.flintparticles.common.particles:Particle;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='scale' fullname='com.boristhebrave.Box2DWith.Flint:Collide/private:scale' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='BodyRenderer' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\Flint\BodyRenderer.as' namespace='com.boristhebrave.Box2DWith.Flint' access='public' baseclass='org.flintparticles.common.renderers:RendererBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Kinematic controller sets b2Body objects according to the motion of
  Particles. Particles need to have a body defined by an appropriate initializer, and must be
  2D particles.
  ]]></description>
</classRec>
<method name='BodyRenderer' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer/BodyRenderer' isStatic='false' isFinal='false' isOverride='false'  param_names='world;scale' param_types='Box2D.Dynamics:b2World;Number' param_defaults='undefined;unknown' result_type='*'>
<description><![CDATA[
   Constructs a BodyRenderer.
   ]]></description>
<param><![CDATA[world The world to be "rendered" to.
   ]]></param>
<param><![CDATA[scale A scaling factor between Flint's pixel co-ordinates and Box2D's units, in pixels/unit.
   ]]></param>
</method>
<method name='removeParticle' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer/protected:removeParticle' isStatic='false' isFinal='false' isOverride='true'  param_names='particle' param_types='org.flintparticles.common.particles:Particle' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
   The removeParticle method is called when a particle is removed from one
   of the emitters that is being rendered by this renderer.
   ]]></description>
<param><![CDATA[particle The particle.
   ]]></param>
</method>
<method name='renderParticles' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer/protected:renderParticles' isStatic='false' isFinal='false' isOverride='true'  param_names='particles' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
   The renderParticles method is called during the render phase of 
   every frame if the state of one of the emitters being rendered
   by this renderer has changed.
   
   ]]></description>
<param><![CDATA[particles The particles being managed by all the emitters
   being rendered by this renderer. The particles are in no particular
   order.
   ]]></param>
</method>
<field name='BODY_KEY' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer/BODY_KEY' type='' isStatic='true' isConst='false' defaultValue='com.boristhebrave.Box2DWith.Flint::body' >
<description><![CDATA[ Use this key to look up the corresponding body of a particle in its dictionary.]]></description>
</field>
<field name='OWNSBODY_KEY' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer/OWNSBODY_KEY' type='' isStatic='true' isConst='false' defaultValue='com.boristhebrave.Box2DWith.Flint::ownsBody' >
<description><![CDATA[
   Use this key to look up the owns body value of a particle in its dictionary.
   The actual value is a boolean determing if the body should be destroyed when the particle is.
   ]]></description>
</field>
<field name='defaultScale' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer/defaultScale' type='Number' isStatic='true' isConst='false' defaultValue='30' >
<description><![CDATA[
   Setting this value saves the effort of specifying the scale parameter in a lot of constructors.
   ]]></description>
</field>
<field name='scale' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer/private:scale' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The scaling factor between Flint's pixel co-ordinates and Box2D's units, in pixels/unit. ]]></description>
</field>
<field name='world' fullname='com.boristhebrave.Box2DWith.Flint:BodyRenderer/private:world' type='Box2D.Dynamics:b2World' isStatic='false' isConst='false' >
<description><![CDATA[ The world to be "rendered" to. ]]></description>
</field>
<classRec name='Physics' fullname='com.boristhebrave.Box2DWith.Flint:Physics' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\Flint\Physics.as' namespace='com.boristhebrave.Box2DWith.Flint' access='public' baseclass='org.flintparticles.common.activities:ActivityBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
  This activity creates a Box2D world, and manages the interaction between particles and the world.
  This class is mainly for convenience, providing a way to add true physics to an Emitter with the
  least fuss.
  
  <p>It is still necessary to initialize particles with a body, using one of the provided initializers.</p>
  ]]></description>
</classRec>
<method name='Physics' fullname='com.boristhebrave.Box2DWith.Flint:Physics/Physics' isStatic='false' isFinal='false' isOverride='false'  param_names='lowerBound;upperBound;scale' param_types='flash.geom:Point;flash.geom:Point;Number' param_defaults='null;null;unknown' result_type='*'>
</method>
<method name='addedToEmitter' fullname='com.boristhebrave.Box2DWith.Flint:Physics/addedToEmitter' isStatic='false' isFinal='false' isOverride='true'  param_names='emitter' param_types='org.flintparticles.common.emitters:Emitter' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removedFromEmitter' fullname='com.boristhebrave.Box2DWith.Flint:Physics/removedFromEmitter' isStatic='false' isFinal='false' isOverride='true'  param_names='emitter' param_types='org.flintparticles.common.emitters:Emitter' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='update' fullname='com.boristhebrave.Box2DWith.Flint:Physics/update' isStatic='false' isFinal='false' isOverride='true'  param_names='emitter;time' param_types='org.flintparticles.common.emitters:Emitter;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='collidePerEmitter' fullname='com.boristhebrave.Box2DWith.Flint:Physics/private:collidePerEmitter' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='emitters' fullname='com.boristhebrave.Box2DWith.Flint:Physics/private:emitters' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='positionIterations' fullname='com.boristhebrave.Box2DWith.Flint:Physics/positionIterations' type='int' isStatic='false' isConst='false' defaultValue='10' >
<description><![CDATA[ Stability parameter for position correction. ]]></description>
<see><![CDATA[Box2D.Dynamics.b2World#Step()]]></see>
</field>
<field name='rendererPerEmitter' fullname='com.boristhebrave.Box2DWith.Flint:Physics/private:rendererPerEmitter' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='scale' fullname='com.boristhebrave.Box2DWith.Flint:Physics/private:scale' type='Number' isStatic='false' isConst='false' >
</field>
<field name='time' fullname='com.boristhebrave.Box2DWith.Flint:Physics/private:time' type='Number' isStatic='false' isConst='false' >
</field>
<field name='velocityIterations' fullname='com.boristhebrave.Box2DWith.Flint:Physics/velocityIterations' type='int' isStatic='false' isConst='false' defaultValue='10' >
<description><![CDATA[ Stability parameter for velocity resolution. ]]></description>
<see><![CDATA[Box2D.Dynamics.b2World#Step()]]></see>
</field>
<field name='world' fullname='com.boristhebrave.Box2DWith.Flint:Physics/world' type='Box2D.Dynamics:b2World' isStatic='false' isConst='false' >
<description><![CDATA[ The physical world. You need this reference for initializers. ]]></description>
</field>
<classRec name='b2Graphics' fullname='com.boristhebrave.Box2DWith:b2Graphics' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\b2Graphics.as' namespace='com.boristhebrave.Box2DWith' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  A re-implementation of debug drawing without the hassles of Box2D's API.
  By drawing into Sprites which you persist through frames, the methods here
  are appropriate for production release.
  ]]></description>
</classRec>
<method name='b2Graphics' fullname='com.boristhebrave.Box2DWith:b2Graphics/b2Graphics' isStatic='false' isFinal='false' isOverride='false'  param_names='graphics;physScale' param_types='flash.display:Graphics;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Creates a wrapper for Graphics, with it's own set of drawing properties.
   ]]></description>
<param><![CDATA[graphics The Graphics object to wrap.
   ]]></param>
<param><![CDATA[physScale The scaling to use, in pixels/unit.
   ]]></param>
</method>
<method name='drawBody' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawBody' isStatic='false' isFinal='false' isOverride='false'  param_names='body' param_types='Box2D.Dynamics:b2Body' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws a body, including styling.
   ]]></description>
</method>
<method name='drawBodyLocal' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawBodyLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='body' param_types='Box2D.Dynamics:b2Body' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws a body in local co-ordinates, including styling.
   ]]></description>
</method>
<method name='drawBodyOutline' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawBodyOutline' isStatic='false' isFinal='false' isOverride='false'  param_names='body' param_types='Box2D.Dynamics:b2Body' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws the given body, without setting any style properties.
   Use this instead of drawBody if you want a more customized looking shape.
   ]]></description>
</method>
<method name='drawBodyOutlineLocal' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawBodyOutlineLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='body' param_types='Box2D.Dynamics:b2Body' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws the given body in local cordinates, without setting any style properties.
   Use this instead of drawBodyLocal if you want a more customized looking shape.
   ]]></description>
</method>
<method name='drawJoint' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawJoint' isStatic='false' isFinal='false' isOverride='false'  param_names='joint' param_types='Box2D.Dynamics.Joints:b2Joint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws a joint, including styling.
   ]]></description>
</method>
<method name='drawJointOutline' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawJointOutline' isStatic='false' isFinal='false' isOverride='false'  param_names='joint' param_types='Box2D.Dynamics.Joints:b2Joint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws the given joint, without setting any style properties.
   Use this instead of drawJoint if you want a more customized looking shape.
   ]]></description>
</method>
<method name='drawSegment' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawSegment' isStatic='false' isFinal='false' isOverride='false'  param_names='p1;p2' param_types='Box2D.Common.Math:b2Vec2;Box2D.Common.Math:b2Vec2' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
   Draws an unstyled line.
   ]]></description>
</method>
<method name='drawShapeOutline' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawShapeOutline' isStatic='false' isFinal='false' isOverride='false'  param_names='shape' param_types='Box2D.Collision.Shapes:b2Shape' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws the given shape in world co-ordinates, without setting any style properties.
   Use this instead of drawShape if you want a more customized looking shape.
   ]]></description>
</method>
<method name='drawShapeOutlineLocal' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawShapeOutlineLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='shape' param_types='Box2D.Collision.Shapes:b2Shape' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws the given shape in local co-ordinates, without setting any style properties.
   Use this instead of drawShapeLocal if you want a more customized looking shape.
   ]]></description>
</method>
<method name='drawWorld' fullname='com.boristhebrave.Box2DWith:b2Graphics/drawWorld' isStatic='false' isFinal='false' isOverride='false'  param_names='world' param_types='Box2D.Dynamics:b2World' param_defaults='undefined' result_type='void'>
<description><![CDATA[
   Draws a world, including styling. Note that it is more efficient to draw bodies into
   separate DisplayObjects once, and then move them around, than to call drawWorld once
   per frame.
   ]]></description>
<deprecated><![CDATA[]]></deprecated>
</method>
<field name='awakeColor' fullname='com.boristhebrave.Box2DWith:b2Graphics/awakeColor' type='uint' isStatic='false' isConst='false' defaultValue='0xE6E6E6' >
<description><![CDATA[ The color to use for awake dynamic bodies. ]]></description>
</field>
<field name='fillAlpha' fullname='com.boristhebrave.Box2DWith:b2Graphics/fillAlpha' type='Number' isStatic='false' isConst='false' defaultValue='0.5' >
<description><![CDATA[ The alpha to use for filling in bodies. ]]></description>
</field>
<field name='graphics' fullname='com.boristhebrave.Box2DWith:b2Graphics/graphics' type='flash.display:Graphics' isStatic='false' isConst='false' >
<description><![CDATA[ The wrapped Graphics to draw to. ]]></description>
</field>
<field name='jointColor' fullname='com.boristhebrave.Box2DWith:b2Graphics/jointColor' type='uint' isStatic='false' isConst='false' defaultValue='0x80CDCD' >
<description><![CDATA[ The color to use for drawing joints. ]]></description>
</field>
<field name='lineThickness' fullname='com.boristhebrave.Box2DWith:b2Graphics/lineThickness' type='Number' isStatic='false' isConst='false' defaultValue='1' >
<description><![CDATA[ The line thickness to use for drawing, in pixels. ]]></description>
</field>
<field name='physScale' fullname='com.boristhebrave.Box2DWith:b2Graphics/physScale' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The scale between pixels and Box2D units, in pixels/unit. ]]></description>
</field>
<field name='sleepColor' fullname='com.boristhebrave.Box2DWith:b2Graphics/sleepColor' type='uint' isStatic='false' isConst='false' defaultValue='0x8080E6' >
<description><![CDATA[ The color to use for sleeping dynamic bodies. ]]></description>
</field>
<field name='staticColor' fullname='com.boristhebrave.Box2DWith:b2Graphics/staticColor' type='uint' isStatic='false' isConst='false' defaultValue='0x80E680' >
<description><![CDATA[ The color to use for static bodies. ]]></description>
</field>
<field name='xformScale' fullname='com.boristhebrave.Box2DWith:b2Graphics/xformScale' type='Number' isStatic='false' isConst='false' defaultValue='3' >
<description><![CDATA[ The size to draw xforms at, in units. ]]></description>
</field>
<classRec name='b2XML' fullname='com.boristhebrave.Box2DWith:b2XML' sourcefile='C:\Users\Admin\Documents\Creative 2009\Flas\repos\Box2DWith\Source\com\boristhebrave\Box2DWith\b2XML.as' namespace='com.boristhebrave.Box2DWith' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
  Contains functions for loading Box2D shapes, bodies and joints from a simple XML format.
  
  <p>The XML format is formally defined in using <a href="http://relaxng.org/">Relax NG</a> in the file
  <a href="box2d.rng">box2d.rng</a> found in the same directory as this class.
  An <a href="http://www.w3.org/XML/Schema">XML Schema</a> file is also <a href="box2d.xsd">available</a>, autotranslated by 
  <a href="http://www.thaiopensource.com/relaxng/trang.html">Trang</a>.</p>
  
  <p>Simply stated, the XML format has a root &lt;world/&gt; element. Inside that, there are various body and joint elements, 
  and inside each body element is various shape elements, thus matching Box2Ds design layout quite closely.
  See the methods loadShapeDef, loadBodyDef, and loadJointDef for the details on how each element is formed.</p>
  
  <p>In general, attribute names match exactly the corresponding Box2D property, and has the same defaults as Box2D.
  Reasonable values are generated for certain properties when not specified, in the same manner as the various
  Initialize functions of Box2D. Joint anchors can be specified in either world or local co-ordinates, either single
  or jointly, though this implementation will not prevent you from overspecifying attributes.</p>
  
  <p>It is expected that in most cases, you will not want to use the XML to fully define worlds using loadWorld, as
  this library doesn't provide any mechanism for handling other data, such as the appearance of a body. Instead, you
  can use the various loading functions to synthesize your own XML format containing parts of the Box2D XML specification.
  Or you can simply use this class as a more consise and portable way of writing out defintions, and deal with defining
  the world in your own way.</p>
  
  ]]></description>
<see><![CDATA[#loadShapeDef()
  ]]></see>
<see><![CDATA[#loadBodyDef()
  ]]></see>
<see><![CDATA[#loadJointDef()
  ]]></see>
</classRec>
<method name='assignJointDefFromXML' fullname='com.boristhebrave.Box2DWith:b2XML/private:assignJointDefFromXML' isStatic='true' isFinal='false' isOverride='false'  param_names='xml;to;body1;body2;base' param_types='XML;Box2D.Dynamics.Joints:b2JointDef;Box2D.Dynamics:b2Body;Box2D.Dynamics:b2Body;Box2D.Dynamics.Joints:b2JointDef' param_defaults='undefined;undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[
   Reads common joint def attributes from xml.
   ]]></description>
</method>
<method name='assignShapeDefFromXML' fullname='com.boristhebrave.Box2DWith:b2XML/private:assignShapeDefFromXML' isStatic='true' isFinal='false' isOverride='false'  param_names='xml;to;base' param_types='XML;Box2D.Collision.Shapes:b2ShapeDef;Box2D.Collision.Shapes:b2ShapeDef' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[
   Reads common shape def attributes from xml.
   ]]></description>
</method>
<method name='loadBody' fullname='com.boristhebrave.Box2DWith:b2XML/loadBody' isStatic='true' isFinal='false' isOverride='false'  param_names='xml;world;bodyDef;shapeDef' param_types='XML;Box2D.Dynamics:b2World;Box2D.Dynamics:b2BodyDef;Box2D.Collision.Shapes:b2ShapeDef' param_defaults='undefined;undefined;null;null' result_type='Box2D.Dynamics:b2Body'>
<description><![CDATA[
   Creates a body from a &lt;body/&gt; element with nested shape elementss, using the definitions from loadBodyDef and loadShapeDef.
   ]]></description>
<param><![CDATA[xml The &lt;body/&gt; element to parse.
   ]]></param>
<param><![CDATA[world The world to create the body from.
   ]]></param>
<param><![CDATA[bodyDef The base body definition to use for defaults.
   ]]></param>
<param><![CDATA[shapeDef The base shape definition to use for defaults.
   ]]></param>
<return><![CDATA[A newly created body in world.
   ]]></return>
<see><![CDATA[#loadBodyDef()
   ]]></see>
<see><![CDATA[#loadShapeDef()
   ]]></see>
</method>
<method name='loadBodyDef' fullname='com.boristhebrave.Box2DWith:b2XML/loadBodyDef' isStatic='true' isFinal='false' isOverride='false'  param_names='body;base' param_types='XML;Box2D.Dynamics:b2BodyDef' param_defaults='undefined;null' result_type='Box2D.Dynamics:b2BodyDef'>
<description><![CDATA[
   Converts a &lt;body/&gt; element into a b2BodyDef.
   
   <p>The following attributes are recognized, corresponding directly
   to the b2BodyDef properties:</p>
   <pre>
   allowSleep       Boolean
   angle            Number
   angularDamping   Number
   fixedRotation    Boolean
   isBullet         Boolean
   isSleeping       Boolean
   linearDamping    Number
   center           b2Vec2
   I                Number
   mass             Number
   x                Number
   y                Number
   position         b2Vec2
   userData         &#x2A;  </pre>
   ]]></description>
<param><![CDATA[body An XML element in the above format.
   ]]></param>
<param><![CDATA[base A body definition to use as the default when an XML attribute is missing.
   ]]></param>
<return><![CDATA[The specified b2BodyDef.
   ]]></return>
</method>
<method name='loadBool' fullname='com.boristhebrave.Box2DWith:b2XML/loadBool' isStatic='true' isFinal='false' isOverride='false'  param_names='attribute;defacto' param_types='XMLList;Boolean' param_defaults='undefined;false' result_type='Boolean'>
<description><![CDATA[
   Loads a Boolean from a given attribute. Only the value "true" is recognized as true. Everything else is false.
   ]]></description>
<param><![CDATA[attribute An attribute list of zero or one attributes to parse into a Boolean.
   ]]></param>
<param><![CDATA[defacto  The default number to use in case there is no attribute.
   ]]></param>
<return><![CDATA[The parsed Boolean, or defacto.
   ]]></return>
</method>
<method name='loadFloat' fullname='com.boristhebrave.Box2DWith:b2XML/loadFloat' isStatic='true' isFinal='false' isOverride='false'  param_names='attribute;defacto' param_types='XMLList;Number' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
   Loads a Number from a given attribute.
   ]]></description>
<param><![CDATA[attribute An attribute list of zero or one attributes to parse into a Number.
   ]]></param>
<param><![CDATA[defacto  The default number to use in case there is no attribute or it is not a valid Number.
   ]]></param>
<return><![CDATA[The parsed Number, or defacto.
   ]]></return>
</method>
<method name='loadInt' fullname='com.boristhebrave.Box2DWith:b2XML/loadInt' isStatic='true' isFinal='false' isOverride='false'  param_names='attribute;defacto' param_types='XMLList;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
   Loads a int from a given attribute.
   ]]></description>
<param><![CDATA[attribute An attribute list of zero or one attributes to parse into a int.
   ]]></param>
<param><![CDATA[defacto  The default number to use in case there is no attribute or it is not a valid int.
   ]]></param>
<return><![CDATA[The parsed int, or defacto.
   ]]></return>
</method>
<method name='loadJointDef' fullname='com.boristhebrave.Box2DWith:b2XML/loadJointDef' isStatic='true' isFinal='false' isOverride='false'  param_names='joint;resolver;base' param_types='XML;Function;Box2D.Dynamics.Joints:b2JointDef' param_defaults='undefined;undefined;null' result_type='Box2D.Dynamics.Joints:b2JointDef'>
<description><![CDATA[
   Converts an XML element into a b2JointDef.
   
   <p>The following elements and attributes are recognized:</p>
   <pre>
   &lt;gear/&gt;    b2GearJointDef
           ratio           Number
           joint1          String    (resolved)
           joint2          String    (resolved)
   
   &lt;prismatic/&gt; b2PrismaticJointDef
           motorSpeed      Number
           maxMotorForce   Number
           enableMotor     Boolean   (automatically set)
           lower           Number
           upper           Number
           enableLimits    Boolean   (automatically set)
           referenceAngle  Number    (automatically set)
           world-axis      b2Vec2
           local-axis1     b2Vec2
   
   &lt;revolute/&gt;    b2RevoluteJointDef
           motorSpeed      Number
           maxMotorTorque  Number
           enableMotor     Boolean   (automatically set)
           lower           Number
           upper           Number
           enableLimits    Boolean   (automatically set)
           referenceAngle  Number    (automatically set)
   
   &lt;distance/&gt;    b2DistanceJointDef
           dampingRatio    Number
           frequencyHz     Number
           length          Number    (automatically set)
   
   &lt;pulley/&gt; b2PulleyJointDef
           ratio           Number
           maxLength1      Number
           maxLength2      Number
           world-ground    b2Vec2
           world-ground1   b2Vec2
           world-ground2   b2Vec2
           length1         Number    (automatically set)
           length2         Number    (automatically set)
   
   &lt;mouse/&gt;    b2MouseJointDef
           dampingRatio    Number
           frequencyHz     Number
           maxForce        Number
           target          b2Vec2 </pre>
   
   <p>Additionally, all elements support the following attributes:</p>
   <pre>
   body1             String          (resolved)
   body2             String          (resolved)
   world-anchor      b2Vec2
   world-anchor1     b2Vec2
   world-anchor2     b2Vec2
   local-anchor1     b2Vec2
   local-anchor2     b2Vec2
   collideConnected  Boolean </pre>
   
   <p>Note that if the joint does not have a well defined body from body1/body2 or via providing base,
   then world co-ordinates cannot be used, except for the ground anchors of a pulley joint.</p>
   
   ]]></description>
<param><![CDATA[joint An XML element in the above format
   ]]></param>
<param><![CDATA[resolver A function mapping strings to b2Bodys (and b2Joint).
   This is used so that the body1 and body2 (and joint1 and joint2 from &lt;gear/&gt;) can get resolved
   to the correct references. You can avoid using this if these properties are not defined, and providing them via base.
   ]]></param>
<param><![CDATA[base A joint definition to use as the default when an XML attribute is missing.
   ]]></param>
<return><![CDATA[The corresponding b2ShapeDef
   ]]></return>
</method>
<method name='loadShapeDef' fullname='com.boristhebrave.Box2DWith:b2XML/loadShapeDef' isStatic='true' isFinal='false' isOverride='false'  param_names='shape;base' param_types='XML;Box2D.Collision.Shapes:b2ShapeDef' param_defaults='undefined;null' result_type='Box2D.Collision.Shapes:b2ShapeDef'>
<description><![CDATA[
   Converts an XML element into a b2ShapeDef.
   
   <p>The following elements/usages are recognized:</p>
   <pre>
   &lt;circle radius="0." x="0." y="0."/&gt;
        b2CircleDef 
   &lt;circle radius="0." localPosition="0. 0."/&gt;
        b2CircleDef    
   &lt;polygon&gt;
    &lt;vertex x="0." y="0."/&gt;
    &lt;vertex x="0." y="0."/&gt;
    &lt;vertex x="0." y="0."/&gt;
   &lt;/polygon&gt;
        b2PolygonDef
   &lt;box x="0." y="0." width="0." height="0." angle="0."/&gt;
        b2PolygonDef formed into an OBB.
   &lt;box left="" right="" top="" bottom=""/&gt;
        b2PolygonDef formed into an AABB.
        height and width can substitute for one of top/bottom and one of left/right.</pre>
   
   <p>Additionally, all elements support the following attributes.</p>
   <pre>
   density        float
   friction       float
   isSensor       Boolean
   userData       String
   categoryBits   int
   maskBits       int
   groupIndex     int</pre>
   
   ]]></description>
<param><![CDATA[shape An XML element in the above format
   ]]></param>
<param><![CDATA[base A shape definition to use as the default when an XML attribute is missing.
   ]]></param>
<return><![CDATA[The corresponding b2ShapeDef
   ]]></return>
</method>
<method name='loadVec2' fullname='com.boristhebrave.Box2DWith:b2XML/loadVec2' isStatic='true' isFinal='false' isOverride='false'  param_names='attribute;defacto' param_types='XMLList;Box2D.Common.Math:b2Vec2' param_defaults='undefined;null' result_type='Box2D.Common.Math:b2Vec2'>
<description><![CDATA[
   Loads a b2Vec2 from a given attribute. Vectors are stored as space delimited Numbers, e.g. "1.5 2.3".
   ]]></description>
<param><![CDATA[attribute An attribute list of zero or one attributes to parse into a b2Vec2.
   ]]></param>
<param><![CDATA[defacto  The default number to use in case there is no attribute or it is not a valid b2Vec2.
   ]]></param>
<return><![CDATA[The parsed b2Vec2, or defacto.
   ]]></return>
</method>
<method name='loadWorld' fullname='com.boristhebrave.Box2DWith:b2XML/loadWorld' isStatic='true' isFinal='false' isOverride='false'  param_names='xml;world;bodyDef;shapeDef;jointDef' param_types='XML;Box2D.Dynamics:b2World;Box2D.Dynamics:b2BodyDef;Box2D.Collision.Shapes:b2ShapeDef;Box2D.Dynamics.Joints:b2JointDef' param_defaults='undefined;undefined;null;null;null' result_type='Function'>
<description><![CDATA[
   Loads a world given a XML defintion. 
   
   <p>xml is expected to a &lt;world&gt; element with child &lt;body&gt; and joint elements as specified in
   loadBodyDef and loadShapeDef. &lt;body/&gt; elements should have children shape elements as 
   specified in loadShapeDef.</p>
   
   <p>Both body and joint elements can have an id attribute that gives a string identifier
   to be later resolved for use with the body1 and body2 attributes of joints,
   and joint1 and joint2 attribute of gear joints.</p>
   
   ]]></description>
<param><![CDATA[xml  A <world/> element in the above format.
   ]]></param>
<param><![CDATA[world A world to load into. Unlike other load functions, this function does not create an object from scratch.
   ]]></param>
<param><![CDATA[bodyDef A body definition to use for defaults.
   ]]></param>
<param><![CDATA[shapeDef A shape definition to use for defaults.
   ]]></param>
<param><![CDATA[jointDef A joint definition to use for defaults.
   ]]></param>
<return><![CDATA[A function you can use to resolve the loaded elements, as defined in loadJointDef.
   ]]></return>
<see><![CDATA[#loadJointDef
   ]]></see>
</method>
</asdoc>
