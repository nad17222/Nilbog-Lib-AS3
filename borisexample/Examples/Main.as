package{	import Box2D.Collision.*;	import Box2D.Collision.Shapes.*;	import Box2D.Common.Math.*;	import Box2D.Dynamics.*;	import com.boristhebrave.Box2DWith.*;	import com.boristhebrave.Box2DWith.Flint.*;	import com.nilbog.util.displayobject.FrameUpdater;	import com.nilbog.util.displayobject.UpdateEvent;	import org.flintparticles.common.actions.Age;	import org.flintparticles.common.actions.Fade;	import org.flintparticles.common.counters.*;	import org.flintparticles.common.displayObjects.Dot;	import org.flintparticles.common.initializers.CollisionRadiusInit;	import org.flintparticles.common.initializers.ImageClass;	import org.flintparticles.common.initializers.Lifetime;	import org.flintparticles.common.renderers.Renderer;	import org.flintparticles.twoD.actions.*;	import org.flintparticles.twoD.activities.*;	import org.flintparticles.twoD.emitters.*;	import org.flintparticles.twoD.initializers.*;	import org.flintparticles.twoD.renderers.DisplayObjectRenderer;	import org.flintparticles.twoD.zones.*;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.*;	import flash.geom.Point;	import flash.net.*;	/**	 * Simple demonstration of various Box2D with features.	 * Each mode function found in modes is a standalone example	 * demonstrating some particular feature.	 */	public class Main extends Sprite	{		public var physScale:Number = 10;		public var world:b2World;		public var emitter:Emitter2D;		public var renderer:Renderer;		public var modes:Array = [ XMLMode,ParticleSprayMode, FlintOnlyMode ];		public var mode:int = 0;		public function Main()		{			mode = -1;			nextMode( );			stage.addEventListener( KeyboardEvent.KEY_DOWN, nextMode );			stage.addEventListener( MouseEvent.CLICK, nextMode );					}		public function nextMode(event:Event = null):void		{			mode = (mode + 1) % modes.length;			world = null;			emitter = null;			if (renderer && renderer is DisplayObject)			{				removeChild( renderer as DisplayObject );			}			renderer = null;			graphics.clear( );			modes[mode]( );		}		public function step(event:UpdateEvent = null):void		{			if(world)				world.Step( 1/event.fps, 10 );			if (emitter)				emitter.update( 1/event.fps );		}		public function worldInit(gravity:Number = 0):void 		{			var aabb:b2AABB = new b2AABB( );			aabb.lowerBound.Set( -100, -100 );			aabb.upperBound.Set( 100, 100 );			world = new b2World( aabb, new b2Vec2( 0, gravity ), false );						var debugDraw:b2DebugDraw = new b2DebugDraw( );			debugDraw.m_sprite = (this);			debugDraw.SetFlags( b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit );			debugDraw.m_drawScale = (physScale);			debugDraw.m_fillAlpha = (.5);			world.SetDebugDraw( debugDraw );						FrameUpdater.instance.addEventListener(UpdateEvent.UPDATE, step);		}		/**		 * This mode demonstrates loading an xml file specifying a world.		 */		public function XMLMode():void		{			var loader:URLLoader = new URLLoader( );			loader.addEventListener( Event.COMPLETE, XMLInit ); 			loader.load( new URLRequest( "level.xml" ) );		}		public function XMLInit(event:Event):void 		{			var xml:XML = new XML( event.target.data );			worldInit( 10 );			b2XML.loadWorld( xml, world );		}		/**		 * This mode shows how you can hook up a Flint emitter to a pre-existing world,		 * and use the emitter to generate and control particles in that world.		 */		public function ParticleSprayMode():void		{			//Create an empty world			worldInit( 10 );						//Make a basin			var pd:b2PolygonDef = new b2PolygonDef( );			pd.SetAsOrientedBox( 15, 5, new b2Vec2( 15, 35 ) );			world.GetGroundBody( ).CreateShape( pd );			pd.SetAsOrientedBox( 5, 15, new b2Vec2( -5, 15 ) );			world.GetGroundBody( ).CreateShape( pd );			pd.SetAsOrientedBox( 5, 15, new b2Vec2( 35, 15 ) );			world.GetGroundBody( ).CreateShape( pd );						BodyRenderer.defaultScale = physScale;						//Define the shapes to be used as particles.			var sda:Array /*b2ShapeDef*/ = [ [ new b2CircleDef( ) ], [ new b2PolygonDef( ) ] ];			(sda[0][0] as b2CircleDef).radius = .5;			sda[0][0].density = 1;			(sda[1][0] as b2PolygonDef).SetAsBox( .5, .5 );			sda[1][0].density = 1;						//Create a Flint emitter and initialize it with some standard particles stuff			emitter = new Emitter2D( );			emitter.counter = new Steady( 15 );			emitter.addInitializer( new Position( new DiscZone( new Point( 0, 0 ), 30, 30 ) ) );			emitter.addActivity( new FollowMouse( this ) );			emitter.addInitializer( new Velocity( new DiscZone( new Point( 0, 0 ), 10, 10 ) ) );			emitter.addAction( new MutualGravity( 3, 100 ) );						//Set up the emitter to work with physics			emitter.addInitializer( new BodiesInit( world, [ new b2BodyDef( ) ], sda ) );			emitter.addAction( new com.boristhebrave.Box2DWith.Flint.Collide( ) );			renderer = new BodyRenderer( world );//Note we store a global reference to renderer, or else it will get garbage collected immediately.			renderer.addEmitter( emitter );						emitter.useInternalTick = false;			emitter.start( );		}		/**		 * Demonstrates adding physics to a Flint emitter with minimal Box2D knowledge.		 */		public function FlintOnlyMode():void		{						BodyRenderer.defaultScale = physScale;			//Create a Flint emitter and initialize it with some standard particles stuff			emitter = new Emitter2D( );			emitter.counter = new Steady( 15 );			emitter.addInitializer( new Position( new DiscZone( new Point( 0, 0 ), 30, 30 ) ) );			emitter.addActivity( new FollowMouse( this ) );			emitter.addAction( new MutualGravity( 3, 100 ) );			emitter.addInitializer( new Velocity( new DiscZone( new Point( 0, 0 ), 10, 10 ) ) );			emitter.addInitializer( new ImageClass( Dot, 10 ) );			emitter.addInitializer( new Lifetime( 2, 20 ) );			emitter.addAction( new Fade( ) );			emitter.addAction( new Age( ) );						//Use a physics activity, and keep a reference to it.			var physics:Physics = new Physics( );			emitter.addActivity( physics );			//Lets give the position solver a bit more pep, as we are creating lots of overlapping shapes			physics.positionIterations = 30;						emitter.addInitializer( new CollisionRadiusInit( 10 ) );			emitter.addInitializer( new CircleInit( physics.world ) );						renderer = new DisplayObjectRenderer( );			addChild( renderer as DisplayObjectRenderer );			renderer.addEmitter( emitter );						emitter.useInternalTick = false;			emitter.start( );		}	}}