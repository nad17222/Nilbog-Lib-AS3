package com.nilbog.experiments.box2d{	import com.nilbog.experiments.Experiment;	import com.nilbog.experiments.box2d.controllers.WorldSetupController;	import com.nilbog.physics.controllers.DraggablePhysicsController;	import com.nilbog.physics.controllers.PhysicsBoundsController;	import com.nilbog.physics.controllers.PhysicsTickController;	import com.nilbog.physics.controllers.ShapeDrawingController;	import com.nilbog.physics.events.PhysicsActorEvent;	import com.nilbog.physics.events.PhysicsDestructionEvent;	import com.nilbog.physics.events.PhysicsEvent;	import com.nilbog.physics.models.PhysicsModel;	import com.nilbog.physics.views.Physics2DView;	import com.nilbog.physics.views.PhysicsDebugView;	import com.nilbog.util.FPSCounter;	import flash.geom.Rectangle;	// Classes used in this example	public class Experiment0 extends Experiment	{		private static const PHYSICS_ITERATIONS:uint = 10;		private static const PHYSICS_SCALE:Number = 50;		private static const PHYSICS_WORLD:Rectangle = new Rectangle(-2, -2, 12, 12);		private static const PHYSICS_TIMESTEP:Number = 1/60;				private var model:PhysicsModel;				private var view:Physics2DView;		private var debugView:PhysicsDebugView;				private var tickController:PhysicsTickController;		private var boundsController:PhysicsBoundsController;		private var mouseController:DraggablePhysicsController;		private var drawController:ShapeDrawingController;		private var setupController:WorldSetupController;				public function Experiment0()		{			log.trace("%s(%s)", "Experiment0", arguments.join(", "));						model = new PhysicsModel			( 				PHYSICS_WORLD, 				PHYSICS_TIMESTEP, 				PhysicsModel.EARTH_GRAVITY, 				true, 				PHYSICS_ITERATIONS, 				PhysicsModel.DISPATCH_BOUNDARY_EVENTS | PhysicsModel.DISPATCH_DESTRUCTION_EVENTS			);						//ActorUtil.encloseRectangle( model, new Rectangle(3, 3, 2, 2) );						view = new Physics2DView( model, new Rectangle(0, 0, 10, 10), PHYSICS_SCALE );			model.addEventListener(PhysicsEvent.UPDATE, view.onUpdate);			model.addEventListener(PhysicsActorEvent.ADDED, view.onActorAdded);			model.addEventListener(PhysicsActorEvent.REMOVED, view.onActorRemoved);						addChild(view);						drawController = new ShapeDrawingController( model, view );						debugView = new PhysicsDebugView( model, PHYSICS_SCALE );			addChild(debugView);						tickController = new PhysicsTickController( model );						boundsController = new PhysicsBoundsController(model, debugView);			setupController = new WorldSetupController( model );						mouseController = new DraggablePhysicsController( model, debugView );			model.addEventListener(PhysicsDestructionEvent.JOINT_TO_BE_DESTROYED, mouseController.onJointDestroyed);						addChild(new FPSCounter());		}				override protected function run() :void		{			log.trace("%s(%s)", "run", arguments.join(", "));		}	}}