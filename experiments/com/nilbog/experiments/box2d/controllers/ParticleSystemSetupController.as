package com.nilbog.experiments.box2d.controllers {	import Box2D.Collision.Shapes.b2CircleDef;	import Box2D.Collision.Shapes.b2PolygonDef;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2World;	import com.boristhebrave.Box2DWith.Flint.BodiesInit;	import com.boristhebrave.Box2DWith.Flint.BodyRenderer;	import com.nilbog.log.LogLevel;	import com.nilbog.physics.controllers.PhysicsController;	import com.nilbog.physics.models.PhysicsModel;	import com.nilbog.physics.views.PhysicsView;	import org.flintparticles.common.actions.Age;	import org.flintparticles.common.actions.Fade;	import org.flintparticles.common.counters.Steady;	import org.flintparticles.common.initializers.Lifetime;	import org.flintparticles.common.renderers.Renderer;	import org.flintparticles.twoD.actions.MutualGravity;	import org.flintparticles.twoD.emitters.Emitter2D;	import org.flintparticles.twoD.initializers.Position;	import org.flintparticles.twoD.initializers.Velocity;	import org.flintparticles.twoD.zones.DiscZone;	import flash.geom.Point;	/**	 * Controller that keeps a set number of particles within bounds at all	 * times.	 * 	 * @author jmhnilbog	 */	public class ParticleSystemSetupController extends PhysicsController 	{		private var renderer:Renderer;				public function ParticleSystemSetupController(m:PhysicsModel, v:PhysicsView = null)		{			super( m, v );						log.minimumLevel = LogLevel.TRACE;			log.trace("%s(%s)", "ParticleSystemSetupController", arguments.join(", "));						generateParticleSystem();		}				private function generateParticleSystem() :void		{			log.trace("%s(%s)", "generateParticleSystem", arguments.join(", "));						var m:PhysicsModel = getModel() as PhysicsModel;			var world:b2World = m.world;						BodyRenderer.defaultScale = 50; // TODO: get scale from model?						var sda:Array /*b2ShapeDef*/ = [ [ new b2CircleDef( ) ], [ new b2PolygonDef( ) ] ];			(sda[0][0] as b2CircleDef).radius = .5;			sda[0][0].density = 1;			(sda[1][0] as b2PolygonDef).SetAsBox( .5, .5 );			sda[1][0].density = 1;						var emitter:Emitter2D = new Emitter2D( );			emitter.counter = new Steady( 1 );			emitter.addInitializer( new Position( new DiscZone( new Point( 0, 0 ), 30, 30 ) ) );			emitter.addInitializer( new Velocity( new DiscZone( new Point( 0, 0 ), 10, 10 ) ) );			emitter.addAction( new MutualGravity( 3, 100 ) );			emitter.addInitializer( new Lifetime( 2, 20 ) );			emitter.addAction( new Fade( ) );			emitter.addAction( new Age( ) );						//Set up the emitter to work with physics			emitter.addInitializer( new BodiesInit( world, [ new b2BodyDef( ) ], sda ) );			emitter.addAction( new com.boristhebrave.Box2DWith.Flint.Collide( ) );			renderer = new BodyRenderer( world );//Note we store a global reference to renderer, or else it will get garbage collected immediately.			renderer.addEmitter( emitter );						//emitter.useInternalTick = false;			emitter.start( );						emitter.x = 5 * 50;			emitter.y = 5 * 50;		}	}}