package com.nilbog.experiments.box2d.controllers {	import Box2D.Common.Math.b2Vec2;	import com.nilbog.experiments.box2d.actors.StaticWall;	import com.nilbog.physics.controllers.PhysicsController;	import com.nilbog.physics.models.PhysicsModel;	import com.nilbog.physics.views.PhysicsView;	import flash.geom.Point;	/**	 * Controller that keeps a set number of particles within bounds at all	 * times.	 * 	 * @author jmhnilbog	 */	public class WorldSetupController extends PhysicsController 	{		public function WorldSetupController(m:PhysicsModel, v:PhysicsView = null)		{			super( m, v );						log.trace("%s(%s)", "WorldSetupController", arguments.join(", "));						generateGround();			generateLeftWall();			generateRightWall();			generateRotatingWall();		}				private function generateGround() :void		{			log.trace("%s(%s)", "generateGround", arguments.join(", "));						var m:PhysicsModel = getModel() as PhysicsModel;			var ground:StaticWall = new StaticWall( 12, 1, new Point(5, 10), 0 );			m.addActor( ground );		}				private function generateRightWall() :void		{			log.trace("%s(%s)", "generateRightWall", arguments.join(", "));						var m:PhysicsModel = getModel() as PhysicsModel;			var wall:StaticWall = new StaticWall( 1, 12, new Point(10, 5), 0);			m.addActor( wall );		}				private function generateLeftWall() :void		{			log.trace("%s(%s)", "generateLeftWall", arguments.join(", "));						var m:PhysicsModel = getModel() as PhysicsModel;			var wall:StaticWall = new StaticWall( 1, 12, new Point(0, 5), 0);			m.addActor( wall );		}				private function generateRotatingWall() :void		{			log.trace("%s(%s)", "generateRotatingWall", arguments.join(", "));						var m:PhysicsModel = getModel() as PhysicsModel;			var wall:StaticWall = new StaticWall( .25, .75, new Point(5, 5));			wall.material.density = 0;			m.addActor(wall);			wall.body.ApplyForce(new b2Vec2(10, 0), new b2Vec2(3, 5));		}	}}