package com.nilbog.experiments.flint.physics{	import com.boristhebrave.Box2DWith.Flint.BodyRenderer;	import com.boristhebrave.Box2DWith.Flint.CircleInit;	import com.boristhebrave.Box2DWith.Flint.Physics;	import com.nilbog.random.RNG;	import com.nilbog.random.implementations.MersenneTwister;	import org.flintparticles.common.actions.Age;	import org.flintparticles.common.actions.Fade;	import org.flintparticles.common.counters.Steady;	import org.flintparticles.common.displayObjects.Dot;	import org.flintparticles.common.displayObjects.Star;	import org.flintparticles.common.initializers.CollisionRadiusInit;	import org.flintparticles.common.initializers.ColorInit;	import org.flintparticles.common.initializers.ImageClass;	import org.flintparticles.common.initializers.Lifetime;	import org.flintparticles.common.renderers.Renderer;	import org.flintparticles.twoD.actions.Move;	import org.flintparticles.twoD.actions.MutualGravity;	import org.flintparticles.twoD.activities.FollowMouse;	import org.flintparticles.twoD.emitters.Emitter2D;	import org.flintparticles.twoD.initializers.Position;	import org.flintparticles.twoD.initializers.Velocity;	import org.flintparticles.twoD.renderers.DisplayObjectRenderer;	import org.flintparticles.twoD.zones.DiscZone;	import flash.display.BlendMode;	import flash.display.Sprite;	import flash.filters.BlurFilter;	import flash.filters.ColorMatrixFilter;	import flash.geom.Point;	/**	 * @author jmhnilbog     */    public class Experiment1 extends Sprite    {	    	private var physics:Physics;    	private var renderer:Renderer;    	        public function Experiment1()        {        	RNG.initialize( new MersenneTwister() );        	RNG.seed(2);        	        	physics = new Physics( );        	physics.positionIterations = 30;        	        	var physScale:Number = 100;        	BodyRenderer.defaultScale = physScale;			//Create a Flint emitter and initialize it with some standard particles stuff//			var emitter:Emitter2D = new Emitter2D( );//			emitter.counter = new Steady( 15 );//			emitter.addInitializer( new Position( new DiscZone( new Point( 0, 0 ), 30, 30 ) ) );//			emitter.addActivity( new FollowMouse( this ) );//			emitter.addAction( new MutualGravity( 3, 100 ) );//			emitter.addInitializer( new Velocity( new DiscZone( new Point( 0, 0 ), 10, 10 ) ) );//			emitter.addInitializer( new ImageClass( Dot, 10 ) );//			emitter.addInitializer( new Lifetime( 2, 20 ) );//			emitter.addAction( new Fade( ) );//			emitter.addAction( new Age( ) );						//Use a physics activity, and keep a reference to it.						//emitter.addActivity( physics );			//Lets give the ponition solver a bit more pep, as we are creating lots of overlapping shapes			//physics.positionIterations = 30;			//			emitter.addInitializer( new CollisionRadiusInit( 10 ) );//			emitter.addInitializer( new CircleInit( physics.world ) );//			//			renderer = new DisplayObjectRenderer();			//addChild( renderer as DisplayObjectRenderer );			//renderer.addEmitter( emitter );//			emitter.start( );//			emitter.x = stage.stageWidth/2;//			emitter.y = stage.stageHeight/2;        	        	createOldEmitter();        }                private function createOldEmitter() :void        {        	var emitter:Emitter2D = new Emitter2D();			emitter.counter = new Steady( 20 );						emitter.addInitializer( new ImageClass(Star, 8) );			emitter.addInitializer( new ColorInit( 0xFFFFCC00, 0xFFFFCC00 ) );			emitter.addInitializer( new Velocity( new DiscZone( new Point( 0, 0 ), 200, 100 ) ) );			emitter.addAction( new Move() );			emitter.addAction( new MutualGravity( 5, 50 ) );			emitter.addActivity( physics );			emitter.addInitializer( new CollisionRadiusInit( 1) );			emitter.addInitializer( new CircleInit( physics.world ) );			emitter.addInitializer( new Lifetime( 5, 5 ) );			emitter.addAction( new Fade( ) );			emitter.addAction( new Age( ) );			        	//var renderer:BitmapRenderer = new BitmapRenderer(new Rectangle(0, 0, stage.stageWidth, stage.stageHeight));        	renderer = new DisplayObjectRenderer();			renderer.addEmitter(emitter);			//renderer.addFilter( new BlurFilter( 2, 2, 1 ) );			//renderer.addFilter( new ColorMatrixFilter( [ 1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0 ] ) );			//renderer.blendMode = BlendMode.ADD;			addChild( renderer as DisplayObjectRenderer);						emitter.x = stage.stageWidth/2;			emitter.y = stage.stageHeight/2;			emitter.start();						this.blendMode = BlendMode.ADD;			//this.filters = [			//	new BlurFilter( 2, 2, 1 ),			//	new ColorMatrixFilter( [ 1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0 ] )			//];        }    }}