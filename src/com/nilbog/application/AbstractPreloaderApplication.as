package com.nilbog.application{	import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;	import com.nilbog.assertions.assert;	import com.nilbog.errors.AbstractMethodCallError;	import com.nilbog.util.FlashVars;	import com.nilbog.util.contextmenu.versionStamp;	import com.nilbog.util.instantiatedAs;	import com.nilbog.util.string.sprintf;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.errors.IOError;	import flash.events.ErrorEvent;	/**	 * Minimal aping of the Application class, used for preloading.	 * 	 * @author mark hawley	 */	public class AbstractPreloaderApplication extends Sprite	{			private var flashVars:FlashVars;		private var appLoader:BulkLoader;		/**		 * Constructor.		 */		public function AbstractPreloaderApplication()		{			trace("AbstractPreloaderApplication()");						if (instantiatedAs( this, AbstractPreloaderApplication ))			{				throw new AbstractMethodCallError( "Cannot " + "instantiate Abstract class." );			}						flashVars = FlashVars.initialize(this);			assert(null != flashVars.mainSWF, "mainSWF is a required flashVar.");						// place the build version/date into the right-click menu			versionStamp( this );					run();		}				/**		 * It's assumed you will want to override this method to actually do		 * something once the preloading it was meant to do is done -- it		 * will throw an error if you forget.		 * 		 * @param	app	DisplayObject		 * @throws	AbstractMethodCallError		 */		protected function onPreloadComplete( app:DisplayObject ) :void		{			throw new AbstractMethodCallError();		}		/**		 * Called each time something is preloaded. You may or may not want to 		 * override this to add special behavior -- be sure and call 		 * super.onLoadComplete( event ) if so.		 * 		 * @param	event	BulkProgressEvent		 */		protected function onLoadComplete( event:BulkProgressEvent ):void		{			trace("onLoadComplete("+ arguments.join(", ") + ")");						appLoader.removeEventListener( BulkProgressEvent.COMPLETE, onLoadComplete );            appLoader.removeEventListener( BulkProgressEvent.PROGRESS, onLoadProgress );            appLoader.removeEventListener( BulkLoader.ERROR, onLoadError );            			onPreloadComplete( appLoader.getContent( flashVars.mainSWF ) as DisplayObject );		}		/**		 * Called when a load fails. Throws an IOError as default behavior.		 * 		 * @param	event	ErrorEvent		 * @throws	IOError		 */		protected function onLoadError( event:ErrorEvent ):void		{			trace("onLoadError("+arguments.join(", ")+")");						throw new IOError( "Couldn't load file. " + event );		}		/**		 * You must override this to update your progress bar view.		 * 		 * @param event	BulkProgressEvent		 * @throws AbstractMethodCallError		 */		protected function onLoadProgress( event:BulkProgressEvent ):void		{			trace(sprintf("%s(%s)", "onLoadProgress", arguments.join(", ")));						throw new AbstractMethodCallError();		}				/**		 * Starts the application.		 */		protected function run():void		{			trace(sprintf("%s(%s)", "run", arguments.join(", ")));						appLoader = new BulkLoader( "preloaderApp" );			appLoader.addEventListener( BulkProgressEvent.COMPLETE, onLoadComplete );            appLoader.addEventListener( BulkProgressEvent.PROGRESS, onLoadProgress );            appLoader.addEventListener( BulkLoader.ERROR, onLoadError );            			populateAppLoader( );						appLoader.start( );		}		/**		 * Adds all files required to load to the bulk loader.		 */		private function populateAppLoader():void		{			trace(sprintf("%s(%s)", "populateAppLoader", arguments.join(", ")));						appLoader.add( flashVars.mainSWF );			for each (var url:String in flashVars.assets) 			{				appLoader.add( url );				}		}		/**		 * Centralized event un-listening.		 */		private function removeAppLoaderListeners():void		{			trace(sprintf("%s(%s)", "removeAppLoaderListeners", arguments.join(", ")));						appLoader.removeEventListener( BulkProgressEvent.PROGRESS, onLoadProgress );			appLoader.removeEventListener( BulkProgressEvent.COMPLETE, onLoadComplete );			appLoader.removeEventListener( ErrorEvent.ERROR, onLoadError );		}			}}