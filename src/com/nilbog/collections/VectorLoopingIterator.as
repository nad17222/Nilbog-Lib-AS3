package com.nilbog.collections {	import com.nilbog.collections.events.CollectionEvent;	import com.nilbog.dbc.precondition;	import com.nilbog.errors.NoSuchElementError;	/**	 * @author markhawley	 * 	 * Iterator that proceeds 0,1,2...n,0,1,2...n...	 */	public class VectorLoopingIterator extends AbstractVectorIterator implements IIterator 	{			/**		 * Constructor.		 * 		 * @param	collection	ICollection		 * @param	implementation	Array		 */		public function VectorLoopingIterator( collection:AbstractCollection, implementation:Vector )		{			super( collection, implementation );		}				/**		 * Returns true as long as the collection is not empty.		 * 		 * @return Boolean		 */		public function hasNext():Boolean		{			precondition(!invalid, "Invalid iteration over a changed collection.");						if (collection.isEmpty())			{				return false;			}			else			{				return true;			}		}				/**		 * Returns the next element in the collection. If at the end,		 * starts at the first element again.		 * 		 * @return	*		 * 		 * @throws NoSuchElementException		 */		public function next():*		{			precondition(!invalid, "Invalid iteration over a changed collection.");						if (collection.isEmpty())			{				throw new NoSuchElementError();			}			index++;			if (index == impl.length)			{				index = 0;			}			return impl[index];		}				/**		 * Returns the iterator to the start of the collection.		 */		public function reset():void		{			index = -1;			invalid = false;		}				/**		 * Handles CollectionEvent.CHANGE on iterated collection by marking the		 * iterator invalid.		 * 		 * @param	event	CollectionEvent		 */		override protected function onCollectionChange( event:CollectionEvent ) :void		{			// only a reset can save you now!			invalid = true;		}	}}