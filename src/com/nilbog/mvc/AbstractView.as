package com.nilbog.mvc {	import com.nilbog.errors.AbstractMethodCallError;	import com.nilbog.log.ILog;	import com.nilbog.log.LogLevel;	import com.nilbog.util.instantiatedAs;	import com.nilbog.util.IDestroyable;	import flash.display.Sprite;	import flash.display.DisplayObject;	/**	 * Basc view class.	 * 	 * @author jmhnilbog	 */	public class AbstractView extends Sprite implements IView	{		protected var log:ILog;				protected var model:IModel;		protected var controller:IController;				/**		 * Constructor.		 * 		 * @param	m	PhysicsModel		 * @param	scale	Number (defaults to 1, meaning 1px = 1 meter)		 */		public function AbstractView( m:IModel, c:IController=null )		{			super();						if (instantiatedAs(this, AbstractView))			{				throw new AbstractMethodCallError("Cannot " +					"instantiate Abstract class.");			}						log = getLog( this, LogLevel.WARN );			log.trace("%s(%s)", "AbstractView", arguments.join(", "));						setModel(m);						if (null == c)			{				setController(defaultController(model));			}			else			{				setController(c);			}		}				public function setModel(m:IModel):void		{			log.trace("%s(%s)", "setModel", arguments.join(", "));						var currentModel:IModel = getModel();        	var pair:Object;        	var pairs:Array = getExpectedModelEvents();        	        	if (null != currentModel)        	{        		for each (pair in pairs)        		{        			currentModel.removeEventListener(pair.name, pair.func);        		}        	}        	model = m;        	        	if (null != m)        	{        		for each (pair in pairs)        		{        			model.addEventListener(pair.name, pair.func);        		}        	}		}				public function getModel():IModel		{			log.trace("%s(%s)", "getModel", arguments.join(", "));						return model;		}				public function setController(c:IController):void		{			log.trace("%s(%s)", "setController", arguments.join(", "));						controller = c;		}				public function getController():IController		{			log.trace("%s(%s)", "getController", arguments.join(", "));						return controller;		}				public function defaultController(model:IModel):IController		{			log.trace("%s(%s)", "defaultController", arguments.join(", "));						return null;		}				public function destroy():void		{			log = null;			model = null;			controller = null;						for( var i:uint = 0; i < numChildren; i++)			{				var c:DisplayObject = getChildAt(i);				if (c is IDestroyable)				{					var d:IDestroyable = c as IDestroyable;					if (!d.isDestroyed())					{						d.destroy();					}				}			}		}				public function isDestroyed():Boolean		{			return null == log;		}				/**		 * Returns a array of objects. Each object has a 'name' (the name of an		 * event) and a 'func' (the method on the view that should be called on		 * reciept of the event)		 */		protected function getExpectedModelEvents() :Array		{			return [];		}	}}