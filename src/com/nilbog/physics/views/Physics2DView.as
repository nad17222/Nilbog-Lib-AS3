package com.nilbog.physics.views {	import flash.display.DisplayObject;	import trace;	import com.nilbog.log.LogLevel;	import com.nilbog.physics.actors.PhysicsActor;	import com.nilbog.physics.events.PhysicsActorEvent;	import com.nilbog.physics.events.PhysicsEvent;	import com.nilbog.physics.models.PhysicsModel;	import com.nilbog.util.displayobject.Grid;	import com.nilbog.util.geometry.radiansToDegrees;	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * Basic Physics view showing display object interacting according to the	 * physics model.	 * 	 * @author jmhnilbog	 */	public class Physics2DView extends PhysicsView	{		private var physicsSprite:Sprite = new Sprite();		private var gridSprite:Sprite;				/**		 * Constructor.		 * 		 * @param	m	PhysicsModel		 * @param	scale	Number (defaults to 1, meaning one pixel = 1 meter.)		 */		public function Physics2DView( m:PhysicsModel, area:Rectangle, scale:Number=1 )		{			super(m, area, scale);						log.minimumLevel = LogLevel.WARN;			log.trace("%s(%s)", "Physics2DView", arguments.join(", "));						addChild(physicsSprite);						gridSprite = new Grid( area, scale );			addChild(gridSprite);		}				private function onActorEntersArea( actor:PhysicsActor ) :void		{		}				private function onActorLeavesArea( actor:PhysicsActor ) :void		{		}				private function isActorWithinView( actor:PhysicsActor ) :Boolean		{			return false;		}				/**		 * Listener for actors being added to the simulation. Adds the correct		 * display object to the view and places/scales it appropriately.		 * 		 * @param	e	PhysicsActorEvent		 */		public function onActorAdded( event:PhysicsActorEvent ) :void		{			log.trace("%s(%s)", "onActorAdded", arguments.join(", "));						var actor:PhysicsActor = event.actor;			var display:Sprite = actor.graphic as Sprite;						// if the actor is not meant for display, we are done here.			if (null == display)			{				return;			}						// is the actor within the view's current area? then add it						// perform correct scaling			display.width = event.actor.width * scale;			display.height = event.actor.height * scale;			display.x = event.actor.position.x * scale;			display.y = event.actor.position.y * scale;			display.rotation = radiansToDegrees(event.actor.rotation);							physicsSprite.addChild(display);		}		/**		 * Listener for actors being removed from the simulation. Removes		 * the correct display object from the view.		 * 		 * @param	event	PhysicsActorEvent		 */		public function onActorRemoved( event:PhysicsActorEvent ) :void		{			log.trace("%s(%s)", "onActorRemoved", arguments.join(", "));						var graphic:DisplayObject = event.actor.graphic;						if (null != graphic)			{				log.trace("Removing: %s", graphic);				physicsSprite.removeChild(graphic);			}			else			{				log.info("No graphic associated with actor to remove.");			}					}				/**		 * Listener for physics update events. Moves the actors to the correct		 * positions, scales, and orientations.		 * 		 * @param	event	PhysicsEvent		 */		public function onUpdate( event:PhysicsEvent ) :void		{			log.trace("%s(%s)", "onUpdate", arguments.join(", "));						if (event.awakeActors)			{				for each (var actor:PhysicsActor in event.awakeActors)				{					if (null != actor.graphic)					{						var p:Point = actor.position;						actor.graphic.x = p.x * scale;						actor.graphic.y = p.y * scale;						actor.graphic.rotation = radiansToDegrees(actor.rotation);					}				}			}		}	}}