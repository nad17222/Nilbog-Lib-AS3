package com.nilbog.sfx.bubble {	import com.greensock.easing.Strong;	import com.nilbog.animation.Animation;	import com.nilbog.util.IDestroyable;	import com.nilbog.util.IStageListenable;	import com.nilbog.util.displayobject.FrameUpdater;	import com.nilbog.util.displayobject.StagingHandler;	import com.nilbog.util.displayobject.UpdateEvent;	import flash.display.Sprite;	import flash.events.Event;	/**	 * @author jmhnilbog	 */	public class BubbleSprite extends Sprite implements IStageListenable, IDestroyable	{		private var stagingHandler:StagingHandler;		private var sprite:Sprite = new Sprite( );		private var targetX:Number = 0;		private var targetY:Number = 0;		private var targetScale:Number = 1;		private var field:BubbleField;		public function BubbleSprite( field:BubbleField )		{			this.field = field;						stagingHandler = new StagingHandler( this );						sprite.graphics.beginFill( 0x000000 );			sprite.graphics.drawRoundRect( -5, -5, 10, 10, 3 );			sprite.graphics.endFill( );						addChild( sprite );		}		public function onAddedToStage(event:Event):void		{			FrameUpdater.instance.addEventListener( UpdateEvent.UPDATE, onUpdate );		}		public function onRemovedFromStage(event:Event):void		{			FrameUpdater.instance.removeEventListener( UpdateEvent.UPDATE, onUpdate );		}		public function onUpdate(event:UpdateEvent):void		{			var dx:Number = parent.mouseX - x;			var dy:Number = parent.mouseY - y;			var d:Number = Math.sqrt( dx * dx + dy * dy );						var otx:Number = targetX;			var oty:Number = targetY;			var ots:Number = targetScale;						if (d >= field.LENS_RADIUS)			{				targetX = 0;				targetY = 0;				targetScale = 1;			}			else			{				var displacement:Number = Math.sin( Math.PI * Math.abs( d / field.LENS_RADIUS ) );				targetX = x - field.MAGNIFICATION * dx * displacement / 4;				targetY = y - field.MAGNIFICATION * dy * displacement / 4;				targetScale = field.MAGNIFICATION * (1 - Math.sin( Math.PI * Math.abs( d / field.LENS_RADIUS ) / 2 ));			}						if (targetX != sprite.x && targetY != sprite.y && targetScale != sprite.scaleX)			{				if (otx != targetX || oty != targetY || ots != targetScale)				{					Animation.animator.to( sprite, .25, { x: targetX, y: targetY, scaleX: targetScale, scaleY: targetScale, ease: Strong.easeOut} );				}			}						//	sprite.x = targetX;			//	sprite.y = targetY;			//	sprite.scaleX = sprite.scaleY = targetScale+1;			graphics.clear( );			graphics.lineStyle( 0, 0 );			graphics.moveTo( 0, 0 );			graphics.lineTo( sprite.x, sprite.y );		}		public function destroy():void		{			FrameUpdater.instance.removeEventListener( UpdateEvent.UPDATE, onUpdate );			stagingHandler.destroy( );			stagingHandler = null;		}		public function isDestroyed():Boolean		{			return null == stagingHandler;		}	}}