package com.nilbog.util.number {	import com.nilbog.assertions.checkArgument;	import com.nilbog.functional.reduce;    import com.nilbog.util.Range;    import com.nilbog.util.string.sprintf;        /**	 * @author markhawley	 * 	 * Handles rolling averages.	 */	public class RollingAverage 	{		private var list:Vector.<Number>;				/**		 * Constructor.		 * 		 * @param	count	Number, the number of past and current values to		 * 					recall when calculating this rolling average.		 * 					Optional, defaulting to 10.		 * @param	startValue	Number, if provided, the rolling average is pre-		 * 						populated so that it behaves as though the average		 * 						was already updated count times with this value.		 */		public function RollingAverage( count:uint = 10, startValue:Number=0 )		{			checkArgument(0 != count, "RollingAverage needs a non-zero positive count.");						list = new Vector.<Number>(count, true);						for (var i:uint = 0; i < count; i++)			{				list[i] = startValue;			}		}				public function get min() :Number		{			return reduce(Math.min, list, Number.POSITIVE_INFINITY ) as Number;		}		public function get max() :Number		{			return reduce(Math.max, list, Number.NEGATIVE_INFINITY) as Number;		}				public function get standardDeviation() :Number		{			var avg:Number = average;			var total:Number = 0;			for (var i:uint = 0; i < list.length; i++)			{				total += Math.pow( avg - list[i], 2);			}			return Math.sqrt(total / list.length);		}				public function get average() :Number		{			var total:Number = 0;			for (var i:uint=0; i < list.length; i++)			{				total += list[i];			}			return total / list.length;			}				/**		 * Enters the latest value into the rolling average and returns the		 * current value of the rolling average.		 * 		 * @param	latestValue	Number, optional. A value to add to the rolling		 * 						average.		 * 								 * @return	Number, the current value of the rolling average.		 */		public function update( latestValue:Number ) :Number		{			checkArgument(!isNaN(latestValue));						for (var i:uint = 1; i < list.length; i++)			{				list[i-1] = list[i];			}			list[list.length-1] = latestValue;						return average;		}				/**		 * Returns a string dump for debugging.		 * 		 * @return String		 */		public function toString() :String		{			return sprintf("[RollingAverage of [%s]: %s]", list, average);			}				/**		 * Returns the current value of the rolling average.		 * 		 * @return Object (Number)		 */		public function valueOf() :Object		{			return average;		}	}}