package com.nilbog.collections{	import asunit.framework.TestCase;		import com.nilbog.collections.IIterator;		/**	 * @author mark hawley	 */	public class BagTest extends TestCase 	{		private var instance:Bag;		private var iterator:IIterator;				public function BagTest(testMethod:String = null)		{			super(testMethod);		}				protected override function setUp() :void		{			instance = new Bag();			instance.add("1");			instance.add("1");			instance.add("2");			instance.add("3");			instance.add("1");			iterator = instance.getIterator();		}		protected override function tearDown() :void		{			iterator = null;			instance = null;		}				public function testInstantiation() :void		{			assertTrue("Bag instantiated.", instance is Bag);			assertTrue("Iterator instantiated.", iterator is IIterator );		}				public function testBagginess() :void		{			assertTrue("Bag has five things in it.", 5 == instance.size());			assertTrue("Bag has three '1's in it.", 3 == instance.getCount("1"));			assertTrue("Bag has 3 unique things in it.", 3 == instance.uniqueSet().size());		}				public function testBagIteration() :void		{			var keys:Object = {};			var values:Array = [];						while( iterator.hasNext() )			{				var obj:* = iterator.next();				keys[obj] = true;				values.push(obj);			}						var keyCount:int = 0;			for (var key:String in keys)			{				key;				keyCount++;			}						assertTrue("3 keys found.", 3 == keyCount);			assertTrue("Matches unique test.", keyCount == instance.uniqueSet().size());			assertTrue("5 items found.", 5 == values.length);			assertTrue("Matches size test.", values.length == instance.size());		}				public function testBagUnion() :void		{			var a:Bag = new Bag([ "A", "B" ,"C" ]);			var b:Bag = new Bag([ "C", "D", "E", "C", "C" ]);						var s:IBag = a.union(b);						log.info("UNION: %s", s);						assertTrue("Union has 7 members.", 7 == s.size());			assertTrue("Contains A.", s.contains("A"));			assertTrue("Contains B.", s.contains("B"));			assertTrue("Contains C.", s.contains("C"));			assertTrue("Contains D.", s.contains("D"));			assertTrue("Contains E.", s.contains("E"));			assertTrue("Contains 3 Cs.", s.getCount("C") == 3);		}				public function testBagDifference() :void		{			var a:Bag = new Bag([ "A", "B" ,"C", "C", "E", "E" ]);			var b:Bag = new Bag([ "C", "D", "E", "C", "C" ]);						var s:IBag = a.difference(b);						log.info("DIFFERENCE: %s",  s);						assertTrue("Difference has 2 members.", 3 == s.size());			assertTrue("Contains A.", s.contains("A"));			assertTrue("Contains B.", s.contains("B"));			assertTrue("Contains E.", s.contains("E"));		}				public function testBagIntersection() :void		{			var a:Bag = new Bag([ "A", "B" ,"C" ]);			var b:Bag = new Bag([ "C", "D", "E" ]);						var s:IBag = a.intersection(b);						log.info("INTERSECTION: %s", s);						assertTrue("Intersection has 1 member.", 1 == s.size());			assertTrue("Contains C.", s.contains("C"));		}	}}