package com.nilbog.collections{    import asunit.framework.TestCase;    import com.nilbog.collections.List;    /**	 * @author mark hawley	 */	public class ListIteratorOrderedTest extends TestCase 	{		private var list:List;		private var iterator:IListIterator;				public function ListIteratorOrderedTest(testMethod:String = null)		{			super(testMethod);		}				protected override function setUp() :void		{			list = new List();			list.add("A");			list.add("B");			list.add("C");			iterator = list.getListIterator();		}		protected override function tearDown() :void		{			iterator = null;			list = null;		}				public function testInstantiation() :void		{			assertTrue("List instantiated.", list is List);			assertTrue("Iterator instantiated.", iterator is ArrayOrderedIterator );		}				public function testSize() :void		{			var size:uint = list.size();			assertTrue("Size is 3.", size == 3);		}				public function testOrder() :void		{			var results:Array = ["A", "B", "C"];			while( iterator.hasNext() )			{				var expectedResult:String = results.shift();				assertTrue("Results as expected.", expectedResult == iterator.next());			}			assertTrue("All results found as expected.", results.length == 0);		}				public function testReset() :void		{			var results:Array = ["A", "B", "C", "A", "B", "C"];			while( iterator.hasNext() )			{				var expectedResult:String = results.shift();				assertTrue("Results as expected.", expectedResult == iterator.next());								if (results.length == 3)				{					iterator.reset();				}			}			assertTrue("All results found as expected.", results.length == 0);		}				public function testReverseOrder() :void		{			var results:Array = ["A", "B", "C"];			var index:int = 0;			var expectedResult:String;			var result:String;			while( iterator.hasNext() )			{				expectedResult = results[index];				result = iterator.next();				assertTrue("Results as expected.", expectedResult == result);								index++;			}			assertTrue("Index is 3=" + index, 3 == index);			index = 1;			while( iterator.hasPrevious() )			{					expectedResult = results[index];				result = iterator.previous();				assertTrue("Results as expected: " + result, expectedResult == result);				index--;			}			assertTrue("Index is -1=" + index, -1 == index);		}				public function testFunky() :void		{			assertFalse("At start.", iterator.hasPrevious());			assertTrue("A found.", iterator.next() == "A");			assertTrue("B found.", iterator.next() == "B");			assertTrue("A found again.", iterator.previous() == "A");			assertTrue("B found again.", iterator.next() == "B");			assertTrue("C found.", iterator.next() == "C");			assertTrue("B found for the 3rd time.", iterator.previous() == "B");			assertTrue("C found again.", iterator.next() == "C");			assertFalse("At end.", iterator.hasNext());		}	}}