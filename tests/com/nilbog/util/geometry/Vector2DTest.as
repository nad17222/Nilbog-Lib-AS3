package com.nilbog.util.geometry {	import com.nilbog.collections.IIterator;	import com.nilbog.collections.OrderedSet;	import asunit.framework.TestCase;	import com.nilbog.util.number.epsilonCompare;	/**	 * @author mark hawley	 */	public class Vector2DTest extends TestCase 	{		public function Vector2DTest(testMethod:String = null)		{			super(testMethod);		}				protected override function setUp() :void		{		}				protected override function tearDown() :void		{		}				public function testInstantiation() :void		{			var v:Vector2D = new Vector2D();			assertTrue("Instantiated Vector2D", v is Vector2D);		}				public function testAddition() :void		{			var v:Vector2D = new Vector2D(1, 1);			v.add({x: 2, y: 3});						assertTrue("1, 1 plus 2, 3 is 3, 4 (" + v + ")", 3 == v.x && 4 == v.y);						var v1:Vector2D = v.added({x: 5, y: 2});			assertTrue("3, 4 plus 5, 2 is 8, 6 (" + v1 + ")", 8 == v1.x && 6 == v1.y);					}				public function testAngle() :void		{			var v:Vector2D = new Vector2D(1, 1);			assertTrue("1, 1 is  a 45º angle.", 45 == radiansToDegrees(v.angle));						log.info("before: %s", v);			v.angle = degreesToRadians(-45);			log.info("after: %s", v);			assertTrue("-45º (315º) is 1, -1 (" + v + ")");		}				public function testAngleTo() :void		{			var v1:Vector2D = new Vector2D(0,0);			var v2:Vector2D = new Vector2D(1, 1);						var a:Number = v1.angleTo(v2);			assertTrue("45º to 1,1 (" + radiansToDegrees(a) + ")", 45 == radiansToDegrees(a));		}				public function testBasics() :void		{			var v:Vector2D = new Vector2D(0, 1);			assertTrue("0, 1 at 0, 1", 0 == v.x && 1 == v.y);			assertTrue("0, 1 length is 1", 1 == v.length);			assertTrue("0, 1 angle is 90º", 90 == radiansToDegrees(v.angle));		}				public function testClone() :void		{			var v:Vector2D = new Vector2D(10, 2);			var c:Vector2D = v.clone() as Vector2D;						assertTrue("vector2D and clone are different objects.", v !== c);			assertTrue("vector2d and clone are equal.", v.equals(c));		}				public function testCrossProduct() :void		{			var v:Vector2D = new Vector2D(1, 1);						var cp:Number = v.crossProduct({ x: 2, y: 2});			assertTrue("'cross product' of 1,1 and 2,2 is 0", 0 == cp);			cp = v.crossProduct({x: 10, y: -2});			assertTrue("'crossProduct' of 1, 1 and 10,-2 is -12", -12 == cp);		}				public function testDotProduct() :void		{			var v:Vector2D = new Vector2D(1, 1);						var dp:Number = v.dotProduct({x: 2, y: 2});			assertTrue("dot product of 1,1 and 2,2 is 4", 4 == dp);			dp = v.dotProduct({x: 10, y: -2});			assertTrue("dot product of 1,1 and 10,-2 is 8", 8 == dp);		}				public function testComparisons() :void		{			var v1:Vector2D = new Vector2D(0, 0);			var v2:Vector2D = new Vector2D(0, 1);			var v3:Vector2D = new Vector2D(0, 10);			var v4:Vector2D = new Vector2D(0, 10);						assertTrue("0,0 less than 0,1", v1.lessThan(v2));			assertTrue("0,0 less than 0,10", v1.lessThan(v3));			assertTrue("0,1 less than 0,10", v1.lessThan(v3));			assertFalse("0,0 not less than 0,0", v1.lessThan(v1));			assertFalse("0,10 not less than 0,1", v3.lessThan(v2));			assertFalse("0,10 not less than 0,10", v3.lessThan(v4));						assertTrue("0,0 equals self.", v1.equals(v1));			assertTrue("0,10 equals 0,10", v3.equals(v4));						v4.angle = Math.PI;						assertTrue("v3 and v4 have equal lengths.", epsilonCompare(v3.length, v4.length));			assertTrue("v4 is greater than v3, because it has a greater angle.", v4.greaterThan(v3));						var s:OrderedSet = new OrderedSet([v4, v3, v2, v1], Vector2D);			var i:IIterator = s.getIterator();			var correctOrder:Array = [v1, v2, v3, v4];			var index:uint = 0;			log.info("Set: " + s);			log.info("Set length: " + s.size());			while(i.hasNext())			{				var v:Vector2D = i.next() as Vector2D;				assertTrue(v + " found in correct sort order.", v == correctOrder[index]);				index++;			}					}				public function testMultiplication() :void		{			var v:Vector2D = new Vector2D(1, 1);			var v1:Vector2D = v.multiplied(10);						assertTrue("v1 is 10 times longer than v", epsilonCompare(v1.length, v.length * 10));			assertTrue("v1 has same angle as v", epsilonCompare(v.angle, v1.angle));						v.multiply(.1);						assertTrue("v shrunk to a tenth of original size.", epsilonCompare(v1.length, v.length * 100));		}				public function testNormalization() :void		{			var v:Vector2D = new Vector2D(0, 0);						assertTrue("0,0 is the zero vector.", Vector2D.isZeroVector(v));						v.normalize();			assertTrue("The normalized zero vector is the zero vector.", Vector2D.isZeroVector(v));						v.length = 10;			assertTrue("Setting the length of the zero vector does nothing.", Vector2D.isZeroVector(v));						v.x = 1;			v.y = 1;						assertTrue("1,1 has a length of sqrt(2) (" + v.length + ")", epsilonCompare(Math.SQRT2, v.length));						var n:Vector2D = v.normalized();			assertTrue("1,1 (normalized) has a length of 1.", epsilonCompare(n.length, 1));		}				public function testReversal() :void		{			var v:Vector2D = new Vector2D(0, 1);						assertTrue("0,1 angle is up", epsilonCompare(v.angle, Math.PI/2));						v.reverse();						assertTrue("0,1 reversed is 0, -1", epsilonCompare(v.x, 0) && epsilonCompare(v.y, -1));					}				public function testRotation() :void		{			var v:Vector2D = new Vector2D(0, 1);			var r:Vector2D = v.rotated(Math.PI);						log.info("V: " + v);			log.info("R: " + r);			log.info("R.angle + Math.PI: " + (r.angle + Math.PI));			log.info("R.angle - Math.PI: " + (r.angle - Math.PI));						assertTrue("v is rotated a radian from r.", epsilonCompare(Math.abs(v.angle - r.angle), Math.PI));		}				public function testReflection() :void		{			var v:Vector2D = new Vector2D(1, 1);			var r:Vector2D = new Vector2D(.5, 0);			var v1:Vector2D = v.reflected(r);						log.info("V: " + v);			log.info("R: " + r);			log.info("V1:" + v1);						assertTrue("1,0 reflected around 0,1 is -1, 0", epsilonCompare(v1.x, -1) && epsilonCompare(v1.y, 0));		}	}}